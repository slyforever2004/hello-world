#!/usr/bin/env bash
set -euo pipefail

# Creates existing Azure resources OUTSIDE Terraform so they can be imported in Lab 6.
# Safe to re-run (idempotent where possible). Requires: az CLI logged in & correct subscription set.
SUBSCRIPTION_ID=$(az account show --query id -o tsv)
SA_SUFFIX=$(echo -n "${SUBSCRIPTION_ID}" | sha256sum | cut -c1-8)

LOCATION=${LOCATION:-southeastasia}
RG_NAME=${RG_NAME:-lab6-rg}
STORAGE_ACCOUNT=${STORAGE_ACCOUNT:-lab6importsa${SA_SUFFIX}}
CONTAINER=${CONTAINER:-tfstate}
VNET_NAME=${VNET_NAME:-lab6-vnet}
VNET_CIDR=${VNET_CIDR:-10.60.0.0/16}
SUBNET_NAME=${SUBNET_NAME:-default}
SUBNET_CIDR=${SUBNET_CIDR:-10.60.1.0/24}
PUBLIC_IP_NAME=${PUBLIC_IP_NAME:-lab6-public-ip}


echo "[INFO] Using subscription: $SUBSCRIPTION_ID"
echo "[INFO] Ensuring resource group $RG_NAME"
az group create -n "$RG_NAME" -l "$LOCATION" >/dev/null

# Storage Account
echo "[INFO] Ensuring storage account $STORAGE_ACCOUNT"
az storage account show -g "$RG_NAME" -n "$STORAGE_ACCOUNT" >/dev/null 2>&1 || \
  az storage account create -g "$RG_NAME" -n "$STORAGE_ACCOUNT" -l "$LOCATION" --sku Standard_LRS --kind StorageV2 >/dev/null

# Container (Azure AD)
echo "[INFO] Ensuring blob container $CONTAINER via Azure AD (auth-mode login)"
if ! az storage container show --account-name "$STORAGE_ACCOUNT" --name "$CONTAINER" --auth-mode login >/dev/null 2>&1; then
  if az storage container create --account-name "$STORAGE_ACCOUNT" --name "$CONTAINER" --auth-mode login >/dev/null 2>&1; then
    echo "[INFO] Created container $CONTAINER using Azure AD."
  else
    echo "[WARN] Could not create container with Azure AD. Ensure your principal has 'Storage Blob Data Contributor' on the storage account." >&2
  fi
else
  echo "[INFO] Container $CONTAINER already exists."
fi

# Virtual Network & Subnet
echo "[INFO] Ensuring vnet $VNET_NAME and subnet $SUBNET_NAME"
az network vnet show -g "$RG_NAME" -n "$VNET_NAME" >/dev/null 2>&1 || \
  az network vnet create -g "$RG_NAME" -n "$VNET_NAME" --address-prefixes "$VNET_CIDR" --subnet-name "$SUBNET_NAME" --subnet-prefixes "$SUBNET_CIDR" >/dev/null
# Ensure subnet exists (in case vnet existed without it)
az network vnet subnet show -g "$RG_NAME" --vnet-name "$VNET_NAME" -n "$SUBNET_NAME" >/dev/null 2>&1 || \
  az network vnet subnet create -g "$RG_NAME" --vnet-name "$VNET_NAME" -n "$SUBNET_NAME" --address-prefixes "$SUBNET_CIDR" >/dev/null

# Public IP
echo "[INFO] Ensuring public IP $PUBLIC_IP_NAME (Standard Static)"
az network public-ip show -g "$RG_NAME" -n "$PUBLIC_IP_NAME" >/dev/null 2>&1 || \
  az network public-ip create -g "$RG_NAME" -n "$PUBLIC_IP_NAME" --sku Standard --allocation-method Static >/dev/null

# Auto-generate terraform.tfvars (idempotent)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TFVARS_FILE="$SCRIPT_DIR/terraform.tfvars"
if [[ -f "$TFVARS_FILE" ]]; then
  echo "[INFO] Existing terraform.tfvars found - leaving unchanged."
else
  cat >"$TFVARS_FILE" <<TFVARS
# Auto-generated by prepare.sh. Adjust if needed.
subscription_id        = "${SUBSCRIPTION_ID}"
resource_group_name    = "${RG_NAME}"
location               = "${LOCATION}"
storage_account_name   = "${STORAGE_ACCOUNT}"
container_name         = "${CONTAINER}"
vnet_name              = "${VNET_NAME}"
subnet_name            = "${SUBNET_NAME}"
public_ip_name         = "${PUBLIC_IP_NAME}"
TFVARS
  echo "[INFO] Wrote $TFVARS_FILE"
fi

# Summaries
STORAGE_ID="/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG_NAME/providers/Microsoft.Storage/storageAccounts/$STORAGE_ACCOUNT"
VNET_ID="/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG_NAME/providers/Microsoft.Network/virtualNetworks/$VNET_NAME"
SUBNET_ID="$VNET_ID/subnets/$SUBNET_NAME"
PUBLIC_IP_ID="/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG_NAME/providers/Microsoft.Network/publicIPAddresses/$PUBLIC_IP_NAME"
CONTAINER_URL="https://${STORAGE_ACCOUNT}.blob.core.windows.net/${CONTAINER}"

cat <<EOF

[CREATED / VERIFIED]
Subscription:          $SUBSCRIPTION_ID
Resource Group:        $RG_NAME
Storage Account:       $STORAGE_ID
Blob Container URL:    $CONTAINER_URL
Virtual Network:       $VNET_ID
Subnet:                $SUBNET_ID
Public IP:             $PUBLIC_IP_ID

Next steps:
1. cd solutions/lab6
2. Review (auto-generated) terraform.tfvars and adjust if desired.
3. Review import.tf (IDs reference the same values above).
4. Run: terraform init
5. Run: terraform plan
6. Plan should show 0 to change if all definitions match existing resources.

Legacy CLI import example (if not using import blocks):
terraform import azurerm_storage_account.imported \$STORAGE_ID
terraform import azurerm_storage_container.imported \$CONTAINER_URL
terraform import azurerm_virtual_network.imported \$VNET_ID
terraform import azurerm_subnet.imported \$SUBNET_ID
terraform import azurerm_public_ip.imported \$PUBLIC_IP_ID

EOF
